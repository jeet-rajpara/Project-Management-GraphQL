// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"project_management/api/models"
	"strconv"
	"time"
)

type AccessToken struct {
	Token string `json:"token"`
}

type Category struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type GetProjectDetail struct {
	ID            string           `json:"id"`
	Name          string           `json:"name"`
	Description   string           `json:"description"`
	ProfilePhoto  *string          `json:"profilePhoto,omitempty"`
	CategoryID    string           `json:"categoryId"`
	Rooms         *int             `json:"rooms,omitempty"`
	Floors        *int             `json:"floors,omitempty"`
	Price         *float64         `json:"price,omitempty"`
	CreatedAt     time.Time        `json:"createdAt"`
	UpdatedAt     time.Time        `json:"updatedAt"`
	IsHide        bool             `json:"isHide"`
	CreatorID     string           `json:"creatorId"`
	Creator       *User            `json:"creator"`
	ScreenShot    []*Screenshot    `json:"screenShot,omitempty"`
	ProjectMember []*ProjectMember `json:"projectMember,omitempty"`
}

type Mutation struct {
}

type Project struct {
	ID           string        `json:"id"`
	Name         string        `json:"name"`
	Description  string        `json:"description"`
	ProfilePhoto *string       `json:"profilePhoto,omitempty"`
	CategoryID   string        `json:"categoryId"`
	Rooms        *int          `json:"rooms,omitempty"`
	Floors       *int          `json:"floors,omitempty"`
	Price        *float64      `json:"price,omitempty"`
	CreatedAt    time.Time     `json:"createdAt"`
	UpdatedAt    time.Time     `json:"updatedAt"`
	IsHide       bool          `json:"isHide"`
	CreatorID    string        `json:"creatorId"`
	Creator      *User         `json:"creator"`
	ScreenShot   []*Screenshot `json:"screenShot,omitempty"`
}

type ProjectMember struct {
	ID        string      `json:"id"`
	UserID    string      `json:"userId"`
	ProjectID string      `json:"projectId"`
	Role      models.Role `json:"role"`
}

type Query struct {
}

type Screenshot struct {
	ID        string `json:"id"`
	ProjectID string `json:"projectId"`
	ImageURL  string `json:"imageUrl"`
}

type User struct {
	ID    string `json:"id"`
	Name  string `json:"name"`
	Email string `json:"email"`
}

type UserProjectDetail struct {
	ID           string    `json:"id"`
	Name         string    `json:"name"`
	Description  string    `json:"description"`
	ProfilePhoto *string   `json:"profilePhoto,omitempty"`
	CategoryID   string    `json:"categoryId"`
	Rooms        *int      `json:"rooms,omitempty"`
	Floors       *int      `json:"floors,omitempty"`
	Price        *float64  `json:"price,omitempty"`
	CreatedAt    time.Time `json:"createdAt"`
	UpdatedAt    time.Time `json:"updatedAt"`
	CreatorID    string    `json:"creatorId"`
	Creator      *User     `json:"creator"`
}

type ProjectSort string

const (
	ProjectSortNewest   ProjectSort = "NEWEST"
	ProjectSortOldest   ProjectSort = "OLDEST"
	ProjectSortNameAsc  ProjectSort = "NAME_ASC"
	ProjectSortNameDesc ProjectSort = "NAME_DESC"
)

var AllProjectSort = []ProjectSort{
	ProjectSortNewest,
	ProjectSortOldest,
	ProjectSortNameAsc,
	ProjectSortNameDesc,
}

func (e ProjectSort) IsValid() bool {
	switch e {
	case ProjectSortNewest, ProjectSortOldest, ProjectSortNameAsc, ProjectSortNameDesc:
		return true
	}
	return false
}

func (e ProjectSort) String() string {
	return string(e)
}

func (e *ProjectSort) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProjectSort(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProjectSort", str)
	}
	return nil
}

func (e ProjectSort) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
